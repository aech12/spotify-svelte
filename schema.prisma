generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// SPOTIFY
model SpotifyClient {
  id                       Int             @id @default(autoincrement())
  client_id                String          @unique
  client_secret            String?
  base64credentials        String?
  access_token             String?
  refresh_token            String?
  access_token_expire_date DateTime?
  SpotifyReport            SpotifyReport[]
}

model SpotifyReport {
  id                      Int                  @id @default(autoincrement())
  user                    SpotifyClient        @relation(fields: [client], references: [client_id])
  client                  String
  update_date             DateTime             @default(now())
  sheets_id               String?              @unique
  // DIMENSIONS
  campaign_id             String?              @unique
  campaign_name           String?
  campaign_current_status String?
  // FIELDS
  SpotifyReportFields     SpotifyReportFields?
}

model SpotifyReportFields {
  id              Int           @id @default(autoincrement())
  campaign        SpotifyReport @relation(fields: [campaign_id], references: [campaign_id])
  campaign_id     String        @unique
  ECPCL           Int?
  SERVE_REACH     Int?
  CLICKS          Int?
  CTR             Int?
  COMPLETION_RATE Int?
  SERVE_FREQUENCY Int?
  IMPRESSIONS     Int?
}

// MGID
model MgidClient {
  id                       Int                 @id @default(autoincrement())
  idAuth                   Int                 @unique
  email                    String?
  password                 String?
  token                    String?
  refreshToken             String?
  access_token_expire_date DateTime?
  MgidVideoCampaign        MgidVideoCampaign[]
  MgidCampaign             MgidCampaign[]
}

model MgidVideoCampaign {
  id                      Int                      @id @default(autoincrement())
  user                    MgidClient               @relation(fields: [client], references: [idAuth])
  client                  Int
  update_date             DateTime                 @default(now())
  sheets_id               String?                  @unique
  // DIMENSIONS
  campaignId              String?                  @unique
  // FIELDS
  MgidVideoCampaignFields MgidVideoCampaignFields?
}

model MgidVideoCampaignFields {
  id              Int               @id @default(autoincrement())
  campaign        MgidVideoCampaign @relation(fields: [campaignId], references: [campaignId])
  campaignId      String            @unique
  impressions     Int?
  viewability     Int?
  complete        Int?
  completion_rate Int?
  clicks          Int?
  ctr             Int?
  spent           Int?
  cpm             Int?
}

model MgidCampaign {
  id                 Int                 @id @default(autoincrement())
  user               MgidClient          @relation(fields: [client], references: [idAuth])
  client             Int
  update_date        DateTime            @default(now())
  sheets_id          String?             @unique
  // DIMENSIONS
  campaignId         String?             @unique
  // FIELDS
  MgidCampaignFields MgidCampaignFields?
}

model MgidCampaignFields {
  id         Int          @id @default(autoincrement())
  campaign   MgidCampaign @relation(fields: [campaignId], references: [campaignId])
  campaignId String       @unique
  imps       Int?
  clicks     Int?
  spent      Int?
  avcpc      Int?
}
